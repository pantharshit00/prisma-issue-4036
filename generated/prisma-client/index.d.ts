// Code generated by Prisma (prisma@1.26.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  time: (
    where?: TimeSubscriptionWhereInput
  ) => TimeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  times_some?: TimeWhereInput;
  times_every?: TimeRestrictedWhereInput;
  times_none?: TimeRestrictedWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
}

export interface TimeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  hour?: Int;
  hour_not?: Int;
  hour_in?: Int[] | Int;
  hour_not_in?: Int[] | Int;
  hour_lt?: Int;
  hour_lte?: Int;
  hour_gt?: Int;
  hour_gte?: Int;
  minute?: Int;
  minute_not?: Int;
  minute_in?: Int[] | Int;
  minute_not_in?: Int[] | Int;
  minute_lt?: Int;
  minute_lte?: Int;
  minute_gt?: Int;
  minute_gte?: Int;
  AND?: TimeWhereInput[] | TimeWhereInput;
}

export interface TimeRestrictedWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  hour?: Int;
  hour_not?: Int;
  hour_in?: Int[] | Int;
  hour_not_in?: Int[] | Int;
  hour_lt?: Int;
  hour_lte?: Int;
  hour_gt?: Int;
  hour_gte?: Int;
  minute?: Int;
  minute_not?: Int;
  minute_in?: Int[] | Int;
  minute_not_in?: Int[] | Int;
  minute_lt?: Int;
  minute_lte?: Int;
  minute_gt?: Int;
  minute_gte?: Int;
  AND?: TimeRestrictedWhereInput[] | TimeRestrictedWhereInput;
}

export interface UserCreateInput {
  fullName: String;
  times?: TimeCreateManyInput;
}

export interface TimeCreateManyInput {
  create?: TimeCreateInput[] | TimeCreateInput;
}

export interface TimeCreateInput {
  hour: Int;
  minute: Int;
}

export interface UserUpdateInput {
  fullName?: String;
  times?: TimeUpdateManyInput;
}

export interface TimeUpdateManyInput {
  create?: TimeCreateInput[] | TimeCreateInput;
  update?:
    | TimeUpdateWithWhereUniqueNestedInput[]
    | TimeUpdateWithWhereUniqueNestedInput;
  upsert?:
    | TimeUpsertWithWhereUniqueNestedInput[]
    | TimeUpsertWithWhereUniqueNestedInput;
  delete?: TimeWhereUniqueInput[] | TimeWhereUniqueInput;
  deleteMany?: TimeScalarWhereInput[] | TimeScalarWhereInput;
  updateMany?:
    | TimeUpdateManyWithWhereNestedInput[]
    | TimeUpdateManyWithWhereNestedInput;
}

export interface TimeUpdateWithWhereUniqueNestedInput {
  where: TimeWhereUniqueInput;
  data: TimeUpdateDataInput;
}

export type TimeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TimeUpdateDataInput {
  hour?: Int;
  minute?: Int;
}

export interface TimeUpsertWithWhereUniqueNestedInput {
  where: TimeWhereUniqueInput;
  update: TimeUpdateDataInput;
  create: TimeCreateInput;
}

export interface TimeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  hour?: Int;
  hour_not?: Int;
  hour_in?: Int[] | Int;
  hour_not_in?: Int[] | Int;
  hour_lt?: Int;
  hour_lte?: Int;
  hour_gt?: Int;
  hour_gte?: Int;
  minute?: Int;
  minute_not?: Int;
  minute_in?: Int[] | Int;
  minute_not_in?: Int[] | Int;
  minute_lt?: Int;
  minute_lte?: Int;
  minute_gt?: Int;
  minute_gte?: Int;
  AND?: TimeScalarWhereInput[] | TimeScalarWhereInput;
  OR?: TimeScalarWhereInput[] | TimeScalarWhereInput;
  NOT?: TimeScalarWhereInput[] | TimeScalarWhereInput;
}

export interface TimeUpdateManyWithWhereNestedInput {
  where: TimeScalarWhereInput;
  data: TimeUpdateManyDataInput;
}

export interface TimeUpdateManyDataInput {
  hour?: Int;
  minute?: Int;
}

export interface UserUpdateManyMutationInput {
  fullName?: String;
}

export interface TimeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TimeWhereInput;
  AND?: TimeSubscriptionWhereInput[] | TimeSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface User {
  id: ID_Output;
  fullName: String;
  times?: <T = FragmentableArray<Time>>() => T;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  times: <T = FragmentableArray<Time>>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  times: <T = Promise<AsyncIterator<TimeSubscription>>>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Time {
  id: ID_Output;
  hour: Int;
  minute: Int;
}

export interface TimePromise extends Promise<Time>, Fragmentable {
  id: () => Promise<ID_Output>;
  hour: () => Promise<Int>;
  minute: () => Promise<Int>;
}

export interface TimeSubscription
  extends Promise<AsyncIterator<Time>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  hour: () => Promise<AsyncIterator<Int>>;
  minute: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TimeSubscriptionPayload {
  mutation: MutationType;
  node: Time;
  updatedFields: String[];
  previousValues: TimePreviousValues;
}

export interface TimeSubscriptionPayloadPromise
  extends Promise<TimeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TimePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TimePreviousValuesPromise>() => T;
}

export interface TimeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TimeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TimeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TimePreviousValuesSubscription>() => T;
}

export interface TimePreviousValues {
  id: ID_Output;
  hour: Int;
  minute: Int;
}

export interface TimePreviousValuesPromise
  extends Promise<TimePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  hour: () => Promise<Int>;
  minute: () => Promise<Int>;
}

export interface TimePreviousValuesSubscription
  extends Promise<AsyncIterator<TimePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  hour: () => Promise<AsyncIterator<Int>>;
  minute: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  fullName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Time",
    embedded: true
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
